/*@targets
 ** $maxopt baseline
 ** sse2 sse41 avx2 avx512_skx
 ** vsx2
 ** neon
 **/
#define _UMATHMODULE
#define _MULTIARRAYMODULE
#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#include "simd/simd.h"
#include "loops_utils.h"
#include "loops.h"
#include "lowlevel_strided_loops.h"
// Provides the various *_LOOP macros
#include "fast_loop_macros.h"

// TODO: replace raw SIMD with NPYV
//###############################################################################
//## Unsigned Integers
//###############################################################################
/********************************************************************************
 ** Defining the SIMD kernels
 ********************************************************************************/
#ifdef NPY_SIMD
/**begin repeat
 *  #sfx = s16#
 */
static void simd_divide_by_scalar_contig_contig_@sfx@
(npyv_lanetype_@sfx@ *src, const npyv_lanetype_@sfx@ scalar, npyv_lanetype_@sfx@ *dst,
 int len)
{  
    const int vstep = npyv_nlanes_@sfx@;
    const npyv_@sfx@x3 divisor = npyv_divisor_@sfx@(scalar);

    for (; len >= vstep; len -= vstep, src += vstep, dst += vstep) {
        npyv_@sfx@ a = npyv_load_@sfx@(src);
        npyv_@sfx@ c = npyv_divc_@sfx@(a, divisor);
        npyv_store_@sfx@(dst, c);
    }
    for (; len > 0; --len, ++src, ++dst) {
        const npyv_lanetype_@sfx@ a = *src;
        *dst = a / scalar;
    }
    npyv_cleanup();
}
/**end repeat**/ 
#endif


/**begin repeat
 * Unsigned types
 *  #type = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 *  #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG#
 *  #sfx = s16*5#
 */
static NPY_INLINE int
run_binary_simd_divide_@TYPE@(char **args, npy_intp const *dimensions, npy_intp const *steps)
{
#if defined NPY_SIMD
    // @type@ * ip1 = (@type@ *)args[0];
    // @type@ * ip2 = (@type@ *)args[1];
    // @type@ * op = (@type@ *)args[2];
    npyv_lanetype_@sfx@ * ip1 = (npyv_lanetype_@sfx@ *)args[0];
    npyv_lanetype_@sfx@ * ip2 = (npyv_lanetype_@sfx@ *)args[1];
    npyv_lanetype_@sfx@ * op = (npyv_lanetype_@sfx@ *)args[2];
    npy_intp n = dimensions[0];

    const @type@ in2 = (npyv_lanetype_@sfx@)ip2;
    simd_divide_by_scalar_contig_contig_@sfx@(ip1, in2, op, n);

    return 1;
#endif
    return 0;
}
/**end repeat**/ 

/**begin repeat
 * Unsigned types
 *  #type = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 *  #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG#
 */
NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_divide)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
    if (IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(@type@) {
            io1 /= *(@type@ *)ip2;
        }
        *((@type@ *)iop1) = io1;
    }
    else if (!run_binary_simd_divide_@TYPE@(args, dimensions, steps)) {
        BINARY_LOOP {
            const @type@ in1 = *(@type@ *)ip1;
            const @type@ in2 = *(@type@ *)ip2;
            *((@type@ *)op1) = in1 / in2;
        }
    }
}
/**end repeat**/
